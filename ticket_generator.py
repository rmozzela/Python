import sys
#import ConfigParser #Python <= 3
import configparser

config = {}
#execfile("/home/miki2/Desktop/Github/Python/codes.cfg", config) #Pyton <= 3
exec(open("/home/cfg/codes.cfg").read()) #Pyton >= 3

class CreateTicket(object):
    def __init__(self):
        self._tickets = {}

    def add_account(self, account_id):
        self._tickets[account_id] = {}

    def ticket_details(self, account_id, validation_code, qr_code):
        by_validation_code = self._tickets[account_id]
        ticket_list = by_validation_code.setdefault(validation_code, [])
        ticket_list.append(qr_code)

    def print_ticket(self):
     for account_id in self._tickets:
         for validation_code in self._tickets[account_id]:
                qr_code_all = ','.join(self._tickets[account_id][validation_code])
                #print len(qr_code_all)
                if len(qr_code_all) > 2222: #22 = (1 uniqueId)
                   print ("System Error, please generate manually" + account_id)
                   break
                print("QR Code BitCode:::|" + account_id + ":::|" + "Found qr code on BitCode" + \
                config[validation_code] + ":::" + " qrcodes=(s)" + qr_code_all + ":::|autogenerated|")

    def __str__(self):
        return '%s' % (self._tickets)

class BitCode:

    def __init__(self,f):
      self.f = open(f)

    def process_file(self, f):
        status = "NULL"
        ticket = CreateTicket()
        file_lines = reversed(f.readlines())
        lines = list(file_lines)
    try: #if account has errors add them to ticket object
        for line in lines:
            words = line.split()
            if ("FOUND:") in words:
                status = words[6]
            elif ("qr:") in words and status == "FOUND:":
                account = words[1]
                ticket.add_account(account)
                status = "NULL"
        for line in lines:
             words = line.split()
             if ("FOUND:") in words:
                 status = words[6]
             elif ("qr:") in words and status == "FOUND:":
                 account = words[1]
             elif ("qrCode:") in words and status == "FOUND:":
                 validation_code = "R" + words[1]
             elif (("uniqueId:") in words and status == "FOUND:"):
                 qr_code = words[1]
                 ticket.ticket_details(account, validation_code, qr_code)
                 status = "NULL"

             ticket.print_ticket()

    except:
            e = sys.exc_info()[0]
            print (e, "Check if the correct file was passed in for the input")

display = BitCode(str(sys.argv[1]))

def main (f):
     #print config
     display.process_file(display.f)
     display.f.close

if __name__ == '__main__':
     main(display.f)
